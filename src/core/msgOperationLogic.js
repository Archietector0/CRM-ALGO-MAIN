import { telegramBot } from "../telegram/TelegramBot.js";
import { CREATE_SUBTASK_KEYBOARD, CREATE_TASK_KEYBOARD, MAIN_KEYBOARD } from "../telegram/constants/keyboards.js";
import { db } from '../db/DataBase.js'
import { QueryTypes } from "sequelize";

const taskConn = db.getConnection({
  DB_NAME: process.env.DB_TASK_NAME,
  DB_USERNAME: process.env.DB_TASK_USERNAME,
  DB_PASS: process.env.DB_TASK_PASS,
  DB_DIALECT: process.env.DB_TASK_DIALECT,
  DB_HOST: process.env.DB_TASK_HOST,
  DB_PORT: process.env.DB_TASK_PORT
})
const taskImg = db.getImage({ sequelize: taskConn, modelName: process.env.DB_TASK_TABLE_NAME })


const subTaskConn = db.getConnection({
  DB_NAME: process.env.DB_SUBTASK_NAME,
  DB_USERNAME: process.env.DB_SUBTASK_USERNAME,
  DB_PASS: process.env.DB_SUBTASK_PASS,
  DB_DIALECT: process.env.DB_SUBTASK_DIALECT,
  DB_HOST: process.env.DB_SUBTASK_HOST,
  DB_PORT: process.env.DB_SUBTASK_PORT
})

const subTaskImg = db.getImage({ sequelize: subTaskConn, modelName: process.env.DB_SUBTASK_TABLE_NAME })



export async function processingMessageOperationLogic({ response, user, bot }) {
  switch (user.state) {
    case 'input_subtask_header': {
      if (!user.subTask) {
        await telegramBot.editMessage({ msg: response, phrase: 'SERVER WAS RESTARTED', user, keyboard: MAIN_KEYBOARD, bot })
        await telegramBot.deleteMsg({ msg: response, user, bot })
        return
      }

      let taskData = (await taskConn.query(`
      SELECT
        *
      FROM
        task_storage
      WHERE
        uuid = '${user.subTask.getLinkId()}'
      `, {type: QueryTypes.SELECT }))[0]

      user.subTask.setHeader(response.text)
      const phrase = `üíº <b>CRM ALGO INC.</b>\n\n–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞\n--------------------------------\n–ü—Ä–æ–µ–∫—Ç:\n\t\t\t${taskData.project_name}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n\t\t\t${taskData.task_header}\n–û–ø–∏—Å–∞–Ω–∏–µ:\n\t\t\t${taskData.task_description}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:\n\t\t\t${taskData.task_priority}\n–û—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–π:\n\t\t\t${taskData.senior_id}\n--------------------------------\n–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–±—Ç–∞—Å–∫–∏:\n--------------------------------\n–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n\t\t\t${user.subTask.getHeader()}\n–û–ø–∏—Å–∞–Ω–∏–µ:\n\t\t\t${user.subTask.getDescription()}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:\n\t\t\t${user.subTask.getPriority()}\n–ê—Å–∏—Å—Ç–µ–Ω—Ç:\n\t\t\t${user.subTask.getAssistant()}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:\n\t\t\t${user.subTask.getPerformer()}\n`
      await telegramBot.editMessage({ msg: response, phrase, user, keyboard: CREATE_SUBTASK_KEYBOARD, bot })
      await telegramBot.deleteMsg({ msg: response, user, bot })
      user.state = 'deleter'
      break
    } case 'input_subtask_description': {
      if (!user.subTask) {
        await telegramBot.editMessage({ msg: response, phrase: 'SERVER WAS RESTARTED', user, keyboard: MAIN_KEYBOARD, bot })
        await telegramBot.deleteMsg({ msg: response, user, bot })
        return
      }
      let taskData = (await taskConn.query(`
      SELECT
        *
      FROM
        task_storage
      WHERE
        uuid = '${user.subTask.getLinkId()}'
      `, {type: QueryTypes.SELECT }))[0]

      user.subTask.setDescription(response.text)
      const phrase = `üíº <b>CRM ALGO INC.</b>\n\n–û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞\n--------------------------------\n–ü—Ä–æ–µ–∫—Ç:\n\t\t\t${taskData.project_name}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n\t\t\t${taskData.task_header}\n–û–ø–∏—Å–∞–Ω–∏–µ:\n\t\t\t${taskData.task_description}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:\n\t\t\t${taskData.task_priority}\n–û—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–π:\n\t\t\t${taskData.senior_id}\n--------------------------------\n–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–±—Ç–∞—Å–∫–∏:\n--------------------------------\n–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n\t\t\t${user.subTask.getHeader()}\n–û–ø–∏—Å–∞–Ω–∏–µ:\n\t\t\t${user.subTask.getDescription()}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:\n\t\t\t${user.subTask.getPriority()}\n–ê—Å–∏—Å—Ç–µ–Ω—Ç:\n\t\t\t${user.subTask.getAssistant()}\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:\n\t\t\t${user.subTask.getPerformer()}\n`
      await telegramBot.editMessage({ msg: response, phrase, user, keyboard: CREATE_SUBTASK_KEYBOARD, bot })
      await telegramBot.deleteMsg({ msg: response, user, bot })
      user.state = 'deleter'
      break
    } case 'input_header': {
      user.getLastTask().setHeader(response.text)
      const phrase = `üíº <b>CRM ALGO INC.</b>\n\n–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n--------------------------------\n–ü—Ä–æ–µ–∫—Ç:\n\t\t\t${user.getLastTask().getProject()}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n\t\t\t${user.getLastTask().getHeader()}\n–û–ø–∏—Å–∞–Ω–∏–µ:\n\t\t\t${user.getLastTask().getDescription()}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:\n\t\t\t${user.getLastTask().getPriority()}\n–û—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–π:\n\t\t\t${user.getLastTask().getSenior()}\n--------------------------------\n`
      await telegramBot.editMessage({ msg: response, phrase, user, keyboard: CREATE_TASK_KEYBOARD, bot })
      await telegramBot.deleteMsg({ msg: response, user, bot })
      user.state = 'deleter'
      break
    } case 'input_description': {
      user.getLastTask().setDescription(response.text)
      const phrase = `üíº <b>CRM ALGO INC.</b>\n\n–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏\n--------------------------------\n–ü—Ä–æ–µ–∫—Ç:\n\t\t\t${user.getLastTask().getProject()}\n–ó–∞–≥–æ–ª–æ–≤–æ–∫:\n\t\t\t${user.getLastTask().getHeader()}\n–û–ø–∏—Å–∞–Ω–∏–µ:\n\t\t\t${user.getLastTask().getDescription()}\n–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:\n\t\t\t${user.getLastTask().getPriority()}\n–û—Ç–≤–µ—Ç—Å–≤–µ–Ω–Ω—ã–π:\n\t\t\t${user.getLastTask().getSenior()}\n--------------------------------\n`
      await telegramBot.editMessage({ msg: response, phrase, user, keyboard: CREATE_TASK_KEYBOARD, bot })
      await telegramBot.deleteMsg({ msg: response, user, bot })
      user.state = 'deleter'
      break
    } case 'deleter': {
      await telegramBot.deleteMsg({ msg: response, user, bot })
      break
    } default: {
      const phrase = `üíº <b>CRM ALGO INC.</b>\n\n–•—ç–π, <b>${user.getFirstName()}</b>, —Ä–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üòâ\n\n–î–∞–≤–∞–π –Ω–∞–º—É—Ç–∏–º –¥–µ–ª–æ–≤ üôå`
      await telegramBot.sendMessage({ msg: response, phrase, user, keyboard: MAIN_KEYBOARD, bot })
      user.state = 'deleter'
      break;
    }
  }
}